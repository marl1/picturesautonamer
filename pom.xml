<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>fr.marclv</groupId>
	<artifactId>PicturesAutoNamer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>PicturesAutoNamer</name>
	<properties>
		<maven.compiler.target>17</maven.compiler.target>
		<maven.compiler.source>17</maven.compiler.source>
		<lombok.version>1.18.30</lombok.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>0.4.20</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.15.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.15.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>21.0.1</version>
            <classifier>win</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>21.0.1</version>
            <classifier>linux</classifier>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx</artifactId>
			<version>21.0.1</version>
			<type>pom</type>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>21.0.1</version>
            <classifier>win</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>21.0.1</version>
            <classifier>linux</classifier>
		</dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>21.0.1</version>
            <classifier>win</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>21.0.1</version>
            <classifier>linux</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>21.0.1</version>
            <classifier>win</classifier>
        </dependency>	
		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>3.3.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
		    <version>2.0.11</version>
		</dependency>
			<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-classic</artifactId>
		    <version>1.4.14</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core -->
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-core</artifactId>
		    <version>1.4.14</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-text -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.11.0</version>
		</dependency>
	</dependencies>
	<build>
		 <plugins>
			<plugin>
			    <groupId>com.igormaznitsa</groupId>
				<!-- Plugin to download other plateform JDK, thus enabling jlink to generate image for all platforms-->
				<artifactId>mvn-jlink-wrapper</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
					<phase>prepare-package</phase>
						<id>cache-jdk-17-linux</id>
						<goals>
							<goal>cache-jdk</goal>
						</goals>
						<configuration>
							<jdkPathProperty>jlink.jdk.path</jdkPathProperty>
							<jdkCachePath>${project.build.directory}${file.separator}jdkCache</jdkCachePath>
							<provider>ADOPTIUM</provider>
							<providerConfig>
								<version>17U</version>
								<arch>x64</arch>
								<type>jdk</type>
								<impl>hotspot</impl>
								<os>linux</os>
								<build>2024-01-14-16-16</build>
							</providerConfig>
						</configuration>
					</execution>
					<execution>
					<phase>prepare-package</phase>
						<id>cache-jdk-17-windows</id>
						<goals>
							<goal>cache-jdk</goal>
						</goals>
						<configuration>
							<jdkCachePath>${project.build.directory}${file.separator}jdkCache</jdkCachePath>
							<provider>ADOPTIUM</provider>
							<providerConfig>
								<version>17U</version>
								<arch>x64</arch>
								<type>jdk</type>
								<impl>hotspot</impl>
								<os>windows</os>
								<build>2024-01-14-16-16</build>
							</providerConfig>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Plugin needed to avoid the error "automatic module cannot be used with jlink" to inject module info to dependencies that doesn't have it -->
				<groupId>org.moditect</groupId>
				<artifactId>moditect-maven-plugin</artifactId>
				<version>1.0.0.RC2</version>
				<executions>
					<execution>
						<id>add-module-infos</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-module-info</goal>
						</goals>
						<configuration>
						<overwriteExistingFiles>true</overwriteExistingFiles>
							<outputDirectory>${project.build.directory}${file.separator}modules</outputDirectory>
							<modules>						
								<module>
									<artifact>
										<groupId>net.coobird</groupId>
										<artifactId>thumbnailator</artifactId>
										<version>0.4.20</version>
									</artifact>
									<!-- I generated the module-info using "jdeps.exe dashdash generate-module-info out thumbnailator-0.4.20.jar" and copy/pasted here -->
									<moduleInfoSource>
									module net.coobird.thumbnailator {
									    requires java.xml;
									
									    requires transitive java.desktop;
									
									    exports net.coobird.thumbnailator;
									    exports net.coobird.thumbnailator.builders;
									    exports net.coobird.thumbnailator.filters;
									    exports net.coobird.thumbnailator.geometry;
									    exports net.coobird.thumbnailator.makers;
									    exports net.coobird.thumbnailator.name;
									    exports net.coobird.thumbnailator.resizers;
									    exports net.coobird.thumbnailator.resizers.configurations;
									    exports net.coobird.thumbnailator.tasks;
									    exports net.coobird.thumbnailator.tasks.io;
									    exports net.coobird.thumbnailator.util;
									    exports net.coobird.thumbnailator.util.exif;
									}
		                        </moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.commons</groupId>
										<artifactId>commons-text</artifactId>
										<version>1.11.0</version>
									</artifact>
									<moduleInfoSource>
								module org.apache.commons.lang3 {
								    requires transitive java.desktop;
								
								    exports org.apache.commons.lang3;
								    exports org.apache.commons.lang3.arch;
								    exports org.apache.commons.lang3.builder;
								    exports org.apache.commons.lang3.compare;
								    exports org.apache.commons.lang3.concurrent;
								    exports org.apache.commons.lang3.concurrent.locks;
								    exports org.apache.commons.lang3.event;
								    exports org.apache.commons.lang3.exception;
								    exports org.apache.commons.lang3.function;
								    exports org.apache.commons.lang3.math;
								    exports org.apache.commons.lang3.mutable;
								    exports org.apache.commons.lang3.reflect;
								    exports org.apache.commons.lang3.stream;
								    exports org.apache.commons.lang3.text;
								    exports org.apache.commons.lang3.text.translate;
								    exports org.apache.commons.lang3.time;
								    exports org.apache.commons.lang3.tuple;
								    exports org.apache.commons.lang3.util;
								}
                        </moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.commons</groupId>
										<artifactId>commons-lang3</artifactId>
										<version>3.13.0</version>
									</artifact>
									<moduleInfoSource>
								module org.apache.commons.lang3 {
								    requires transitive java.desktop;
								
								    exports org.apache.commons.lang3;
								    exports org.apache.commons.lang3.arch;
								    exports org.apache.commons.lang3.builder;
								    exports org.apache.commons.lang3.compare;
								    exports org.apache.commons.lang3.concurrent;
								    exports org.apache.commons.lang3.concurrent.locks;
								    exports org.apache.commons.lang3.event;
								    exports org.apache.commons.lang3.exception;
								    exports org.apache.commons.lang3.function;
								    exports org.apache.commons.lang3.math;
								    exports org.apache.commons.lang3.mutable;
								    exports org.apache.commons.lang3.reflect;
								    exports org.apache.commons.lang3.stream;
								    exports org.apache.commons.lang3.text;
								    exports org.apache.commons.lang3.text.translate;
								    exports org.apache.commons.lang3.time;
								    exports org.apache.commons.lang3.tuple;
								    exports org.apache.commons.lang3.util;
								}
                        </moduleInfoSource>
								</module>
							</modules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.openjfx</groupId>
				<!-- This plugin is mandatory to run/package JavaFx Applications. It also runs jlink. -->
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.8</version>
				<configuration>
				<!-- This configuration is used when we launch the app manually using "mvn javafx:run"-->
					<launcher>PicturesAutoNamer</launcher>
					<jlinkImageName>PicturesAutoNamer</jlinkImageName>
					<mainClass>fr.pan.main.Main</mainClass>
				</configuration>
				<!-- The following executions are used to compile/package the app for distribution -->
				<executions>
					<execution>
						<id>linux-build</id>
						<phase>install</phase>
						<goals>
							<goal>jlink</goal>
						</goals>
						<configuration>
							<stripDebug>true</stripDebug>
							<noHeaderFiles>true</noHeaderFiles>
							<noManPages>true</noManPages>
							<launcher>PicturesAutoNamer</launcher>
							<jlinkImageName>PicturesAutoNamer</jlinkImageName>
							<mainClass>fr.pan.main.Main</mainClass>
							<!-- Here we point to the downloaded linux JDK from mvn-jlink-wrapper and also the modules created by moditect -->
							<jmodsPath>${project.build.directory}${file.separator}jdkCache${file.separator}ADOPTIUM_17u_2024-01-14-16-16_linux_x64_hotspot${file.separator}jmods${path.separator}${project.build.directory}${file.separator}modules</jmodsPath>
							<jlinkImageName>${project.name}-${project.version}-linux</jlinkImageName>
							<jlinkZipName>${project.name}-${project.version}-linux</jlinkZipName>
							<bindServices>true</bindServices>
							<runtimePathOption>MODULEPATH</runtimePathOption>
						</configuration>
					</execution>
					<execution>
						<id>windows-build</id>
						<goals>
							<goal>jlink</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<stripDebug>true</stripDebug>
							<noHeaderFiles>true</noHeaderFiles>
							<noManPages>true</noManPages>
							<launcher>PicturesAutoNamer</launcher>
							<jlinkImageName>PicturesAutoNamer</jlinkImageName>
							<mainClass>fr.pan.main.Main</mainClass>
							<!-- Here we point to the downloaded windows JDK from mvn-jlink-wrapper and also the modules created by moditect -->
							<jmodsPath>${project.build.directory}${file.separator}jdkCache${file.separator}ADOPTIUM_17u_2024-01-14-16-16_windows_x64_hotspot${file.separator}jmods${path.separator}${project.build.directory}${file.separator}modules</jmodsPath>
							<jlinkImageName>${project.name}-${project.version}-win</jlinkImageName>
							<jlinkZipName>${project.name}-${project.version}-win</jlinkZipName>
							<bindServices>true</bindServices>
							<runtimePathOption>MODULEPATH</runtimePathOption>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>src/main/resources/assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>17</source>
					<target>17</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>